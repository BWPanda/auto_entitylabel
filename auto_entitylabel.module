<?php
/**
 * @file
 * Allows hiding of entity label fields and automatic label creation.
 */

define('AUTO_ENTITYLABEL_DISABLED', 0);
define('AUTO_ENTITYLABEL_ENABLED', 1);
define('AUTO_ENTITYLABEL_OPTIONAL', 2);
define('AUTO_ENTITYLABEL_PLACEHOLDER', '%AutoEntityLabel%');

/**
 * Implements hook_permission().
 */
function auto_entitylabel_permission() {
  return array(
    'use PHP for label patterns' => array(
      'title' => t('Use PHP for label patterns'),
      'description' => t('Use PHP evaluation for automatic entity label patterns.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function auto_entitylabel_config_info() {
  $prefixes['auto_entitylabel.settings'] = array(
    'label' => t('Automatic entity label settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function auto_entitylabel_menu() {
  $items = array();

  // Create tabs for all possible bundles.
  $bundles = _auto_entitylabel_get_bundles();
  foreach ($bundles['entities'] as $entity_type => $entity_info) {
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {

      // Get the bundle argument.
      if (isset($bundle_info['admin']['bundle argument'])) {
        $bundle_arg = $bundle_info['admin']['bundle argument'];
      }
      else {
        $bundle_arg = $bundle_name;
      }

      // Extract access information, providing defaults.
      $access = array_intersect_key($bundle_info['admin'], backdrop_map_assoc(array('access callback', 'access arguments')));
      $access += array(
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),
      );

      $path = $bundle_info['admin']['path'];
      $items["$path/auto_label"] = array(
        'title' => 'Auto label',
        'page callback' => 'backdrop_get_form',
        'page arguments' => array('auto_entitylabel_settings_form', $entity_type, $bundle_arg),
        'type' => MENU_LOCAL_TASK,
        'weight' => 1,
        'file' => 'auto_entitylabel.admin.inc',
      ) + $access;

      // Prefix comment entities, because otherwise there would be multiple menu
      // items that just said "Auto label".
      if ($entity_type == 'comment') {
        $items["$path/auto_label"]['title'] = '@type Auto label';
        $items["$path/auto_label"]['title arguments'] = array('@type' => $entity_info['label']);
        $items["$path/auto_label"]['weight'] = 3;
      }

    }
  }

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function auto_entitylabel_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#entity_type']) && isset($form['#bundle']) && empty($form['#auto_entitylabel_processed'])) {
    // Exit if there is no label field.
    $title = _auto_entitylabel_get_label($form['#entity_type']);
    if (!$title) return;

    $info = entity_get_info($form['#entity_type']);
    $key = $form['#entity_type'] . '_' . $form['#bundle'];
    $status = auto_entitylabel_get_config($key);
    $form['#auto_entitylabel_processed'] = TRUE;

    // Integration with the title module.
    $replacement = FALSE;
    if (module_exists('title') && title_field_replacement_enabled($form['#entity_type'], $form['#bundle'], $title)) {
      $title = $info['field replacement'][$title]['instance']['field_name'];
      $replacement = TRUE;
    }

    if ($status == AUTO_ENTITYLABEL_ENABLED) {
      // We will autogenerate the title later, just hide the title field in the
      // meanwhile.
      if ($replacement && isset($form[$title])) {
        $form[$title][$form[$title]['#language']][0]['value']['#value'] = AUTO_ENTITYLABEL_PLACEHOLDER;
        $form[$title][$form[$title]['#language']][0]['value']['#type'] = 'value';
        $form[$title][$form[$title]['#language']][0]['value']['#required'] = FALSE;
      }
      else {
        $form[$title]['#value'] = AUTO_ENTITYLABEL_PLACEHOLDER;
        $form[$title]['#type'] = 'value';
        $form[$title]['#required'] = FALSE;
      }
    }
    elseif ($status == AUTO_ENTITYLABEL_OPTIONAL) {
      if ($replacement && isset($form[$title])) {
        $form[$title][$form[$title]['#language']][0]['value']['#required'] = FALSE;
      }
      else {
        $form[$title]['#required'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function auto_entitylabel_entity_insert($entity, $type) {
  if (auto_entitylabel_is_needed($entity, $type, TRUE)) {
    list($id, , ) = entity_extract_ids($type, $entity);
    $entity_list = &backdrop_static(__FUNCTION__, array());
    $entity_list[$type][] = $id;
  }
}

/**
 * Implements hook_exit().
 *
 * @see auto_entitylabel_entity_insert()
 */
function auto_entitylabel_exit($destination = NULL) {
  $entity_list = &backdrop_static('auto_entitylabel_entity_insert', array());

  // Loop through the entity types and then individual entity IDs.
  foreach($entity_list as $entity_type => $entity_ids) {
    foreach($entity_ids as $entity_id) {
      $entities = entity_load($entity_type, array($entity_id));
      $entity = reset($entities);
      $settings = _auto_entitylabel_get_settings($entity, $entity_type);

      if ($entity) {
        // Store the old label.
        $old_label = $entity->$settings['title'];

        // Update the entity label.
        auto_entitylabel_set_title($entity, $entity_type);

        // Save it only if the title has changed.
        if ($entity->$settings['title'] != $old_label) {
          entity_save($entity_type, $entity);
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_form().
 */
function auto_entitylabel_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  auto_entitylabel_form_alter($form, $form_state, NULL);
}

/**
 * Implements hook_field_attach_submit().
 */
function auto_entitylabel_field_attach_submit($entity_type, $entity, $form, $form_state) {
  if (auto_entitylabel_is_needed($entity, $entity_type)) {
    // Pre-set the title before we submit so that it's visible.
    auto_entitylabel_set_title($entity, $entity_type);
  }
}

/**
 * Implements hook_entity_presave().
 */
function auto_entitylabel_entity_presave($entity, $type) {
  if (auto_entitylabel_is_needed($entity, $type)) {
    auto_entitylabel_set_title($entity, $type);
  }
}

/**
 * Implements hook_field_attach_presave().
 *
 * Required for compatibility with entity_translation module, which does not
 * invoke hook_entity_presave() when saving new translations.
 */
function auto_entitylabel_field_attach_presave($entity_type, $entity) {
  auto_entitylabel_entity_presave($entity, $entity_type);
}

/**
 * Returns whether the auto entitylabel has to be set on the provided entity.
 *
 * @param object $entity A Backdrop entity object.
 * @param string $entity_type The entity type.
 * @param bool $reset Force set the label, even if a title already exists.
 * @return bool
 */
function auto_entitylabel_is_needed($entity, $entity_type, $reset = FALSE) {
  // First, we'll attempt to get the entity type specific settings.
  $settings = _auto_entitylabel_get_settings($entity, $entity_type);

  // Stub out a few rules we'll need to verify in addition to the $reset flag.
  // Do we have configs for this entity type?
  $has_settings = ($settings
    && !empty($settings['key'])
    && ($setting = auto_entitylabel_get_config($settings['key'])));

  // We can't do much if there are no settings.
  if ($has_settings) {
    // Is the label empty? AUTO_ENTITYLABEL_PLACEHOLDER needs to be treated as
    // empty as well.
    $empty_label = (empty($entity->{$settings['title']}) || $entity->{$settings['title']} == AUTO_ENTITYLABEL_PLACEHOLDER);

    // Is the auto label optional?
    $label_optional = ($setting == AUTO_ENTITYLABEL_OPTIONAL);

    // Check if the label is empty or forced. Then make sure an existing label
    // isn't overwritten if the autolabel is optional.
    return (($empty_label || $reset) && !($label_optional && !$empty_label));
  }

  // The above conditions where not met so we'll return FALSE.
  return FALSE;
}

/**
 * Sets the automatically generated entitylabel for the entity.
 */
function auto_entitylabel_set_title(&$entity, $type) {
  $settings = _auto_entitylabel_get_settings($entity, $type);

  // Generate title in different languages?
  $multilingual = FALSE;

  // Support for title module.
  $entity_info = entity_get_info($type);
  list(, , $bundle) = entity_extract_ids($type, $entity);
  $title_field_name = FALSE;
  $title_languages = array();
  if (module_exists('title') && (title_field_replacement_enabled($type, $bundle, $settings['title']))) {
    $title_field_name = $entity_info['field replacement'][$settings['title']]['instance']['field_name'];
    $field_info = field_info_field($title_field_name);
    $title_languages = field_available_languages($type, $field_info);
    $multilingual = count($title_languages) > 1;
  }

  // Remove LANGUAGE_NONE from array of languages.
  if (($key = array_search(LANGUAGE_NONE, $title_languages, TRUE)) && auto_entitylabel_entity_language($type, $entity) !== LANGUAGE_NONE) {
    unset($title_languages[$key]);
  }

  // Generate titles.
  $titles = array();
  $pattern = auto_entitylabel_get_config($settings['key'], 'pattern');
  if (trim($pattern)) {
    $entity->changed = REQUEST_TIME;
    if ($multilingual) {
      foreach ($title_languages as $language) {
        $titles[$language] = _auto_entitylabel_patternprocessor($pattern, $entity, $type, $language);
      }
    }
    else {
      $titles[LANGUAGE_NONE] = _auto_entitylabel_patternprocessor($pattern, $entity, $type);
    }
  }
  elseif ($type == 'node' && !empty($entity->nid)) {
    $titles[LANGUAGE_NONE] = t('@bundle @node-id', array('@bundle' => $bundle, '@node-id' => $entity->nid));
  }
  else {
    $titles[LANGUAGE_NONE] = t('@bundle', array('@bundle' => $bundle));
  }

  // Ensure the generated title isn't too long.
  $max_length = auto_entitylabel_max_length($type, $settings['title']);
  foreach ($titles as $k => $v) {
    $titles[$k] = backdrop_substr($v, 0, $max_length);
  }

  // Save titles on entity (field).
  if (module_exists('title') && (title_field_replacement_enabled($type, $bundle, $settings['title']))) {
    foreach ($titles as $lang => $title) {
      if (!isset($entity->{$title_field_name}[$lang][0]['value']) || $entity->{$title_field_name}[$lang][0]['value'] != $title) {
        $entity->{$title_field_name}[$lang][0]['format'] = NULL;
        $entity->{$title_field_name}[$lang][0]['safe_value'] = check_plain($title);
        $entity->{$title_field_name}[$lang][0]['value'] = $title;
        $entity->auto_entitylabel_changed = TRUE;
      }
    }
  }

  // Save title on entity (non-field). This needs be done even if field_title
  // above is updated, because the title module automatically syncs changes from
  // the "non field title" to the "title field". Without this line we end up
  // getting AUTO_ENTITYLABEL_PLACEHOLDER as the title.
  $entity_language = auto_entitylabel_entity_language($type, $entity);
  $title = isset($titles[$entity_language]) ? $titles[$entity_language] : $titles[LANGUAGE_NONE];
  if (!isset($entity->{$settings['title']}) || $entity->{$settings['title']} != $title) {
    $entity->{$settings['title']} = $title;
    $entity->auto_entitylabel_changed = TRUE;
  }

  // With that flag we ensure we don't apply the title two times to the same
  // node. See auto_entitylabel_is_needed().
  $entity->auto_entitylabel_applied = TRUE;
}

/**
 * Implements hook_action_info().
 */
function auto_entitylabel_action_info() {
  $info['auto_entitylabel_entity_update_action'] = array(
    'type' => 'entity',
    'label' => t('Update automatic entity labels'),
  );

  return $info;
}

/**
 * Update action wrapper.
 *
 * @see auto_entitylabel_action_info()
 */
function auto_entitylabel_entity_update_action(&$entity, &$context = array()) {
  if (auto_entitylabel_is_needed($entity, $context['entity_type'])) {
    auto_entitylabel_set_title($entity, $context['entity_type']);

    // Only save if the title has actually changed.
    if (!empty($entity->auto_entitylabel_changed)) {
      entity_save($context['entity_type'], $entity);
    }
  }
}

/**
  * Helper function to generate the title according to the settings.
  *
  * @return
  *   A title string
  */
function _auto_entitylabel_patternprocessor($pattern, $entity, $entity_type, $language = LANGUAGE_NONE) { 
  // Replace tokens.
  $info = entity_get_info($entity_type);
  $languages = language_list();
  $language_obj = $language == LANGUAGE_NONE ? NULL : $languages[$language];
  $token_data = isset($info['token type']) ? array($info['token type'] => $entity) : array();
  $output = token_replace($pattern, $token_data, array('sanitize' => FALSE, 'clear' => TRUE, 'language' => $language_obj));

  // Evalute PHP.
  $settings = _auto_entitylabel_get_settings($entity, $entity_type);
  if (auto_entitylabel_get_config($settings['key'], 'php')) {
    $output = auto_entitylabel_eval($output, $entity, $language);
  }

  // Strip tags.
  $output = preg_replace('/[\t\n\r\0\x0B]/', '', strip_tags($output));

  return $output;
}

/**
 * Gets the config value for the given entity, bundle and key.
 *
 * @param $type
 *   The entity type and bundle name separated by an underscore (_).
 * @param $key
 *   The config value to get. Can be 'status', 'pattern' or 'php'. Defaults to
 *   'status'.
 */
function auto_entitylabel_get_config($type, $key = 'status') {
  return config_get('auto_entitylabel.settings', $type . '.' . $key);
}

/**
 * Evaluates PHP code and passes $entity and $language to it.
 */
function auto_entitylabel_eval($code, $entity, $language = LANGUAGE_NONE) {
  ob_start();
  print eval('?>' . $code);
  $output = ob_get_contents();
  ob_end_clean();

  return $output;
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function auto_entitylabel_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  $config = config('auto_entitylabel.settings');
  $config->clear($entity_type . '_' . $bundle);
  $config->save();
}

/** 
 * Implements hook_field_attach_rename_bundle().
 */
function auto_entitylabel_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  if ($bundle_old !== $bundle_new) {
    $config = config('auto_entitylabel.settings');
    $value = $config->get($entity_type . '_' . $bundle_old);
    $config->set($entity_type . '_' . $bundle_new, $value);
    $config->clear($entity_type . '_' . $bundle_old);
    $config->save();
  }
}

function _auto_entitylabel_get_settings($entity, $entity_type) {
  $entity_info = entity_get_info($entity_type);
  if ($entity_info['entity keys']['bundle'] && !empty($entity)) {
    $result['key'] = $entity_type . '_' . $entity->{$entity_info['entity keys']['bundle']};
    $result['title'] = _auto_entitylabel_get_label($entity_type);
    return $result;
  }

  return FALSE;
}

/**
 * Tries to extract the maximum length for the given property from the
 * respective database schema field.
 *
 * Assumes that the schema field is named identical to the property.
 */
function auto_entitylabel_max_length($entity_type, $property_name) {
  // Load entity and schema info.
  $entity_info = entity_get_info($entity_type);
  $schema = backdrop_get_schema($entity_info['base table']);

  // Return 'length' from schema field as maximum length, fall back to 255.
  return isset($schema['fields'][$property_name]['length']) ? $schema['fields'][$property_name]['length'] : 255;
}

/**
 * Returns the language code of the given entity.
 *
 * Backward compatibility layer to ensure that installations running an older
 * version of core where entity_language() is not available do not break.
 *
 * @param string $entity_type
 *   An entity type.
 * @param object $entity
 *   An entity object.
 * @param bool $check_language_property
 *   A boolean if TRUE, will attempt to fetch the language code from
 *   $entity->language if the entity_language() function failed or does not
 *   exist. Default is TRUE.
 */
function auto_entitylabel_entity_language($entity_type, $entity, $check_language_property = TRUE) {
  $langcode = NULL;

  // When entity_translation is installed, if overrides the behavior of the
  // entity_language() function by returning the "active form language" instead
  // of the "original entity language". In this case we need to retrieve the
  // original language directly from the translation handler.
  if (module_exists('entity_translation')) {
    $handler = entity_translation_get_handler($entity_type, $entity);
    $langcode = $handler->getLanguage();
  }
  else if (function_exists('entity_language')) {
    $langcode = entity_language($entity_type, $entity);
  }
  elseif ($check_language_property && !empty($entity->language)) {
    $langcode = $entity->language;
  }

  return !empty($langcode) ? $langcode : LANGUAGE_NONE;
}

/**
 * Get an array of entity bundles that have labels and an administration page.
 */
function _auto_entitylabel_get_bundles() {
  $bundles = array();

  foreach (entity_get_info() as $entity_type => $entity_info) {
    // Make sure this entity type has a label field.
    if (_auto_entitylabel_get_label($entity_type)) {
      $bundles['entities'][$entity_type] = $entity_info;
      $bundles['entities'][$entity_type]['bundles'] = array();

      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        // Make sure this bundle has an administration page.
        if (isset($bundle_info['admin'])) {
          $bundles['keys'][] = $entity_type . '_' . $bundle_name;
          $bundles['entities'][$entity_type]['bundles'][$bundle_name] = $bundle_info;
        }
      }
    }
  }

  return $bundles;
}

/**
 * Get the label field of an entity type.
 *
 * @param $entity_type
 *   The entity type to get the label field for.
 */
function _auto_entitylabel_get_label($entity_type) {
  switch ($entity_type) {
    case 'comment':
      return 'subject';
      break;
    case 'file':
      return 'filename';
      break;
    case 'taxonomy_term':
    case 'user':
      return 'name';
      break;
    default:
      return 'title';
  }
}

